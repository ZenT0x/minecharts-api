definitions:
  handlers.CreateAPIKeyRequest:
    properties:
      description:
        example: Key for CI/CD pipeline
        type: string
      expires_at:
        example: "2023-12-31T23:59:59Z"
        type: string
    type: object
  handlers.ExecCommandRequest:
    properties:
      command:
        example: say Hello, world!
        type: string
    required:
    - command
    type: object
  handlers.ExposeServerRequest:
    properties:
      domain:
        example: mc.example.com
        type: string
      exposureType:
        example: NodePort
        type: string
      port:
        example: 25565
        type: integer
    required:
    - exposureType
    type: object
  handlers.LoginRequest:
    properties:
      password:
        example: secretpassword
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: securepass123
        minLength: 8
        type: string
      username:
        example: newuser
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.StartMinecraftServerRequest:
    properties:
      env:
        additionalProperties:
          type: string
        example:
          '"MEMORY"': '"4G"}'
          '"MODE"': '"survival"'
          '{"DIFFICULTY"': '"normal"'
        type: object
      serverName:
        example: survival
        type: string
    required:
    - serverName
    type: object
  handlers.UpdateUserRequest:
    properties:
      active:
        example: true
        type: boolean
      email:
        example: new@example.com
        type: string
      password:
        example: newStrongPassword123
        type: string
      permissions:
        description: Bit flags for permissions
        example: 143
        type: integer
      username:
        example: newusername
        type: string
    type: object
info:
  contact:
    email: support@minecharts.io
    name: API Support
    url: http://www.minecharts.io/support
  description: API for managing Minecraft servers in Kubernetes
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Minecharts API
  version: "0.1"
paths:
  /apikeys:
    get:
      description: Returns all API keys owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of API keys (with masked key values)
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List API keys
      tags:
      - api-keys
    post:
      consumes:
      - application/json
      description: Creates a new API key for the authenticated user
      parameters:
      - description: API key information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created API key (includes full key)
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create API key
      tags:
      - api-keys
  /apikeys/{id}:
    delete:
      description: Deletes an API key by ID
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: API key deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid API key ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete API key
      tags:
      - api-keys
  /auth/callback/{provider}:
    get:
      description: Handles the callback from OAuth provider and creates/authenticates
        user
      parameters:
      - description: OAuth provider (e.g., 'authentik')
        in: path
        name: provider
        required: true
        type: string
      - description: OAuth code
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state
        in: query
        name: state
        required: true
        type: string
      produces:
      - text/html
      responses:
        "307":
          description: Redirect to frontend with token
          schema:
            type: string
        "400":
          description: Invalid request or state mismatch
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: OAuth callback
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Account inactive
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/me:
    get:
      description: Returns information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - auth
  /auth/oauth/{provider}:
    get:
      description: Redirects to OAuth provider's login page
      parameters:
      - description: OAuth provider (e.g., 'authentik')
        in: path
        name: provider
        required: true
        type: string
      produces:
      - text/html
      responses:
        "307":
          description: Redirect to OAuth provider
          schema:
            type: string
        "400":
          description: OAuth not enabled or invalid provider
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Start OAuth login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register new user
      tags:
      - auth
  /ping:
    get:
      description: Health check endpoint that returns a pong message
      produces:
      - application/json
      responses:
        "200":
          description: Pong response
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Ping API
      tags:
      - system
  /servers:
    post:
      consumes:
      - application/json
      description: Creates a new Minecraft server with the specified configuration
      parameters:
      - description: Server configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.StartMinecraftServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Server created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - APIKeyAuth: []
      summary: Create Minecraft server
      tags:
      - servers
  /servers/{serverName}/delete:
    post:
      description: Deletes a Minecraft server and all associated resources
      parameters:
      - description: Server name
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Server deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - APIKeyAuth: []
      summary: Delete Minecraft server
      tags:
      - servers
  /servers/{serverName}/exec:
    post:
      consumes:
      - application/json
      description: Executes a command on the Minecraft server
      parameters:
      - description: Server name
        in: path
        name: serverName
        required: true
        type: string
      - description: Command to execute
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ExecCommandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Command executed
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Server not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - APIKeyAuth: []
      summary: Execute Minecraft command
      tags:
      - servers
  /servers/{serverName}/expose:
    post:
      consumes:
      - application/json
      description: Creates a Kubernetes service to expose the Minecraft server
      parameters:
      - description: Server name
        in: path
        name: serverName
        required: true
        type: string
      - description: Exposure configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ExposeServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Service created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Server not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - APIKeyAuth: []
      summary: Expose Minecraft server
      tags:
      - servers
  /servers/{serverName}/restart:
    post:
      description: Saves the world and restarts the Minecraft server
      parameters:
      - description: Server name
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Server restarting
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Server not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - APIKeyAuth: []
      summary: Restart Minecraft server
      tags:
      - servers
  /servers/{serverName}/start:
    post:
      description: Starts a previously stopped Minecraft server (scales to 1)
      parameters:
      - description: Server name
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Server starting
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Server not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - APIKeyAuth: []
      summary: Start stopped server
      tags:
      - servers
  /servers/{serverName}/stop:
    post:
      description: Saves the world and stops the Minecraft server (scales to 0)
      parameters:
      - description: Server name
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Server stopped
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Server not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - APIKeyAuth: []
      summary: Stop Minecraft server
      tags:
      - servers
  /users:
    get:
      description: Returns a list of all users in the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user from the system
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Returns detailed information about a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates information for an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Permission denied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
securityDefinitions:
  APIKeyAuth:
    description: API Key for authentication.
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
